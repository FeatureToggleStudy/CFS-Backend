// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Allocations.Specs
{
    using TechTalk.SpecFlow;


    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TestManualFeature : System.IDisposable
    {

        private static TechTalk.SpecFlow.ITestRunner testRunner;


#line 1 "BasicPerPupilEntitlement.feature"
#line hidden

        public TestManualFeature(TestManualFeature.FixtureData fixtureData)
        {
            this.TestInitialize();
        }

        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Basic Per Pupil Entitlement", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
         
          //  testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual void FeatureBackground()
        {
#line 6
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "NOR_Pri_SBS",
                        "NOR_Pri_KS4_SBS"});
            table1.AddRow(new string[] {
                        "12",
                        "24"});
#line 7
            testRunner.Given("I have the following global variables:", ((string)(null)), table1, "Given ");
#line hidden
        }

        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }

        public virtual void AddTwoNumbers()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", new string[] {
                        "mytag"});
#line 12
            this.ScenarioSetup(scenarioInfo);
#line 6
            this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "NOR_Pri_SBS",
                        "NOR_Pri_KS4_SBS"});
            table2.AddRow(new string[] {
                        "96",
                        "27"});
#line 13
            testRunner.Given("I have the following provider data:", ((string)(null)), table2, "Given ");
#line 16
            testRunner.When("I calculate the allocations for the provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "NOR_Pri_SBS",
                        "NOR_Pri_KS4_SBS"});
            table3.AddRow(new string[] {
                        "12",
                        "24"});
#line 17
            testRunner.Then("the allocations should be :", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        public virtual void OutlineDrivenExample(string one, string two, string three, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Outline driven example", @__tags);
#line 23
            this.ScenarioSetup(scenarioInfo);
#line 6
            this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "NOR_Pri_SBS",
                        "NOR_Pri_KS4_SBS"});
            table4.AddRow(new string[] {
                        string.Format("{0}", one),
                        string.Format("{0}", two)});
#line 24
            testRunner.Given("I have the following provider data:", ((string)(null)), table4, "Given ");
#line 27
            testRunner.When("I calculate the allocations for the provider", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "NOR_Pri_SBS",
                        "NOR_Pri_KS4_SBS"});
            table5.AddRow(new string[] {
                        "12",
                        string.Format("{0}", three)});
#line 28
            testRunner.Then("the allocations should be :", ((string)(null)), table5, "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {

            public FixtureData()
            {
                TestManualFeature.FeatureSetup();
            }

            void System.IDisposable.Dispose()
            {
                TestManualFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
