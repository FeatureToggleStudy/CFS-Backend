// <auto-generated />
using CalculateFunding.Repositories.Providers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CalculateFunding.Repositories.Providers.Migrations.Migrations
{
    [DbContext(typeof(ProvidersDbContext))]
    [Migration("20171205183003_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CalculateFunding.Repositories.Providers.ProviderCommand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("ProviderCommands");
                });

            modelBuilder.Entity("CalculateFunding.Repositories.Providers.ProviderCommandCandidate", b =>
                {
                    b.Property<Guid>("ProviderCommandId");

                    b.Property<string>("URN");

                    b.Property<string>("Address3");

                    b.Property<string>("CCF");

                    b.Property<string>("CensusAreaStatisticWard");

                    b.Property<DateTimeOffset?>("CensusDate");

                    b.Property<DateTimeOffset?>("CloseDate");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EBD");

                    b.Property<int?>("Easting");

                    b.Property<string>("EdByOther");

                    b.Property<string>("EstablishmentName");

                    b.Property<string>("EstablishmentNumber");

                    b.Property<string>("FEHEIdentifier");

                    b.Property<string>("FTProv");

                    b.Property<string>("FederationFlag");

                    b.Property<string>("FurtherEducationType");

                    b.Property<string>("GSSLACode");

                    b.Property<string>("LSOA");

                    b.Property<DateTimeOffset?>("LastChangedDate");

                    b.Property<string>("Locality");

                    b.Property<string>("MSOA");

                    b.Property<string>("Name");

                    b.Property<int?>("Northing");

                    b.Property<int?>("NumberOfBoys");

                    b.Property<int?>("NumberOfGirls");

                    b.Property<int?>("NumberOfPupils");

                    b.Property<DateTimeOffset?>("OfstedLastInspectionDate");

                    b.Property<string>("OfstedRating");

                    b.Property<DateTimeOffset?>("OpenDate");

                    b.Property<int?>("PRUPlaces");

                    b.Property<decimal?>("PercentageFSM");

                    b.Property<string>("Postcode");

                    b.Property<string>("RSCRegion");

                    b.Property<int?>("ResourcedProvisionCapacity");

                    b.Property<int?>("ResourcedProvisionOnRoll");

                    b.Property<string>("SEN1");

                    b.Property<int?>("SENNoStat");

                    b.Property<string>("SENPRU");

                    b.Property<int?>("SENStat");

                    b.Property<int?>("SchoolCapacity");

                    b.Property<string>("SchoolSponsorFlag");

                    b.Property<string>("SchoolSponsors");

                    b.Property<string>("Section41Approved");

                    b.Property<int?>("SenUnitCapacity");

                    b.Property<int?>("SenUnitOnRoll");

                    b.Property<int?>("StatutoryHighAge");

                    b.Property<int?>("StatutoryLowAge");

                    b.Property<string>("Street");

                    b.Property<string>("TeenMoth");

                    b.Property<int?>("TeenMothPlaces");

                    b.Property<string>("Telephone");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Town");

                    b.Property<string>("TypeOfResourcedProvision");

                    b.Property<string>("UKPRN");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Website");

                    b.HasKey("ProviderCommandId", "URN");

                    b.ToTable("ProviderCommandCandidates");
                });

            modelBuilder.Entity("CalculateFunding.Repositories.Providers.ProviderEntity", b =>
                {
                    b.Property<string>("URN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address3");

                    b.Property<string>("CCF");

                    b.Property<string>("CensusAreaStatisticWard");

                    b.Property<DateTimeOffset?>("CensusDate");

                    b.Property<DateTimeOffset?>("CloseDate");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("EBD");

                    b.Property<int?>("Easting");

                    b.Property<string>("EdByOther");

                    b.Property<string>("EstablishmentName");

                    b.Property<string>("EstablishmentNumber");

                    b.Property<string>("FEHEIdentifier");

                    b.Property<string>("FTProv");

                    b.Property<string>("FederationFlag");

                    b.Property<string>("FurtherEducationType");

                    b.Property<string>("GSSLACode");

                    b.Property<string>("LSOA");

                    b.Property<DateTimeOffset?>("LastChangedDate");

                    b.Property<string>("Locality");

                    b.Property<string>("MSOA");

                    b.Property<string>("Name");

                    b.Property<int?>("Northing");

                    b.Property<int?>("NumberOfBoys");

                    b.Property<int?>("NumberOfGirls");

                    b.Property<int?>("NumberOfPupils");

                    b.Property<DateTimeOffset?>("OfstedLastInspectionDate");

                    b.Property<string>("OfstedRating");

                    b.Property<DateTimeOffset?>("OpenDate");

                    b.Property<int?>("PRUPlaces");

                    b.Property<decimal?>("PercentageFSM");

                    b.Property<string>("Postcode");

                    b.Property<string>("RSCRegion");

                    b.Property<int?>("ResourcedProvisionCapacity");

                    b.Property<int?>("ResourcedProvisionOnRoll");

                    b.Property<string>("SEN1");

                    b.Property<int?>("SENNoStat");

                    b.Property<string>("SENPRU");

                    b.Property<int?>("SENStat");

                    b.Property<int?>("SchoolCapacity");

                    b.Property<string>("SchoolSponsorFlag");

                    b.Property<string>("SchoolSponsors");

                    b.Property<string>("Section41Approved");

                    b.Property<int?>("SenUnitCapacity");

                    b.Property<int?>("SenUnitOnRoll");

                    b.Property<int?>("StatutoryHighAge");

                    b.Property<int?>("StatutoryLowAge");

                    b.Property<string>("Street");

                    b.Property<string>("TeenMoth");

                    b.Property<int?>("TeenMothPlaces");

                    b.Property<string>("Telephone");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Town");

                    b.Property<string>("TypeOfResourcedProvision");

                    b.Property<string>("UKPRN");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("Website");

                    b.HasKey("URN");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("CalculateFunding.Repositories.Providers.ProviderCommandCandidate", b =>
                {
                    b.HasOne("CalculateFunding.Repositories.Providers.ProviderCommand", "ProviderCommand")
                        .WithMany()
                        .HasForeignKey("ProviderCommandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
