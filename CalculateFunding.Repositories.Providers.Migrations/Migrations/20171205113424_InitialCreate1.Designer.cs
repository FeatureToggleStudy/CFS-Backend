// <auto-generated />
using CalculateFunding.Repositories.Providers;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace CalculateFunding.Repositories.Providers.Migrations.Migrations
{
    [DbContext(typeof(ProvidersDbContext))]
    [Migration("20171205113424_InitialCreate1")]
    partial class InitialCreate1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CalculateFunding.Models.Providers.Provider", b =>
                {
                    b.Property<string>("URN")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address3");

                    b.Property<string>("AdministrativeWardId");

                    b.Property<string>("AdmissionsPolicyId");

                    b.Property<string>("AuthorityId");

                    b.Property<string>("BoardersId");

                    b.Property<string>("CCF");

                    b.Property<string>("CensusAreaStatisticWard");

                    b.Property<DateTimeOffset?>("CensusDate");

                    b.Property<DateTimeOffset?>("CloseDate");

                    b.Property<string>("Country");

                    b.Property<string>("County");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<bool>("Deleted");

                    b.Property<string>("DioceseId");

                    b.Property<string>("DistrictAdministrativeId");

                    b.Property<string>("EBD");

                    b.Property<int?>("Easting");

                    b.Property<string>("EdByOther");

                    b.Property<string>("EstablishmentName");

                    b.Property<string>("EstablishmentNumber");

                    b.Property<string>("EstablishmentStatusId");

                    b.Property<string>("EstablishmentTypeGroupId");

                    b.Property<string>("EstablishmentTypeId");

                    b.Property<string>("FEHEIdentifier");

                    b.Property<string>("FTProv");

                    b.Property<string>("FederationFlag");

                    b.Property<string>("FederationsId");

                    b.Property<string>("FurtherEducationType");

                    b.Property<string>("GORId");

                    b.Property<string>("GSSLACode");

                    b.Property<string>("GenderId");

                    b.Property<string>("LSOA");

                    b.Property<DateTimeOffset?>("LastChangedDate");

                    b.Property<string>("Locality");

                    b.Property<string>("MSOA");

                    b.Property<string>("Name");

                    b.Property<int?>("Northing");

                    b.Property<int?>("NumberOfBoys");

                    b.Property<int?>("NumberOfGirls");

                    b.Property<int?>("NumberOfPupils");

                    b.Property<string>("NurseryProvisionId");

                    b.Property<string>("OfficialSixthFormId");

                    b.Property<DateTimeOffset?>("OfstedLastInspectionDate");

                    b.Property<string>("OfstedRating");

                    b.Property<string>("OfstedSpecialMeasuresId");

                    b.Property<DateTimeOffset?>("OpenDate");

                    b.Property<int?>("PRUPlaces");

                    b.Property<string>("ParliamentaryConstituencyId");

                    b.Property<decimal?>("PercentageFSM");

                    b.Property<string>("PhaseOfEducationId");

                    b.Property<string>("Postcode");

                    b.Property<string>("RSCRegion");

                    b.Property<string>("ReasonEstablishmentClosedId");

                    b.Property<string>("ReasonEstablishmentOpenedId");

                    b.Property<string>("ReligiousCharacterId");

                    b.Property<string>("ReligiousEthosId");

                    b.Property<int?>("ResourcedProvisionCapacity");

                    b.Property<int?>("ResourcedProvisionOnRoll");

                    b.Property<string>("SEN1");

                    b.Property<int?>("SENNoStat");

                    b.Property<string>("SENPRU");

                    b.Property<int?>("SENStat");

                    b.Property<int?>("SchoolCapacity");

                    b.Property<string>("SchoolSponsorFlag");

                    b.Property<string>("SchoolSponsors");

                    b.Property<string>("Section41Approved");

                    b.Property<int?>("SenUnitCapacity");

                    b.Property<int?>("SenUnitOnRoll");

                    b.Property<string>("SpecialClassesId");

                    b.Property<int?>("StatutoryHighAge");

                    b.Property<int?>("StatutoryLowAge");

                    b.Property<string>("Street");

                    b.Property<string>("TeenMoth");

                    b.Property<int?>("TeenMothPlaces");

                    b.Property<string>("Telephone");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Town");

                    b.Property<string>("TrustSchoolFlagId");

                    b.Property<string>("TrustsId");

                    b.Property<string>("TypeOfResourcedProvision");

                    b.Property<string>("UKPRN");

                    b.Property<DateTimeOffset>("UpdatedAt");

                    b.Property<string>("UrbanRuralId");

                    b.Property<string>("Website");

                    b.HasKey("URN");

                    b.HasIndex("AdministrativeWardId");

                    b.HasIndex("AdmissionsPolicyId");

                    b.HasIndex("AuthorityId");

                    b.HasIndex("BoardersId");

                    b.HasIndex("DioceseId");

                    b.HasIndex("DistrictAdministrativeId");

                    b.HasIndex("EstablishmentStatusId");

                    b.HasIndex("EstablishmentTypeGroupId");

                    b.HasIndex("EstablishmentTypeId");

                    b.HasIndex("FederationsId");

                    b.HasIndex("GORId");

                    b.HasIndex("GenderId");

                    b.HasIndex("NurseryProvisionId");

                    b.HasIndex("OfficialSixthFormId");

                    b.HasIndex("OfstedSpecialMeasuresId");

                    b.HasIndex("ParliamentaryConstituencyId");

                    b.HasIndex("PhaseOfEducationId");

                    b.HasIndex("ReasonEstablishmentClosedId");

                    b.HasIndex("ReasonEstablishmentOpenedId");

                    b.HasIndex("ReligiousCharacterId");

                    b.HasIndex("ReligiousEthosId");

                    b.HasIndex("SpecialClassesId");

                    b.HasIndex("TrustSchoolFlagId");

                    b.HasIndex("TrustsId");

                    b.HasIndex("UrbanRuralId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("CalculateFunding.Models.Reference", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("CalculateFunding.Models.Providers.Provider", b =>
                {
                    b.HasOne("CalculateFunding.Models.Reference", "AdministrativeWard")
                        .WithMany()
                        .HasForeignKey("AdministrativeWardId");

                    b.HasOne("CalculateFunding.Models.Reference", "AdmissionsPolicy")
                        .WithMany()
                        .HasForeignKey("AdmissionsPolicyId");

                    b.HasOne("CalculateFunding.Models.Reference", "Authority")
                        .WithMany()
                        .HasForeignKey("AuthorityId");

                    b.HasOne("CalculateFunding.Models.Reference", "Boarders")
                        .WithMany()
                        .HasForeignKey("BoardersId");

                    b.HasOne("CalculateFunding.Models.Reference", "Diocese")
                        .WithMany()
                        .HasForeignKey("DioceseId");

                    b.HasOne("CalculateFunding.Models.Reference", "DistrictAdministrative")
                        .WithMany()
                        .HasForeignKey("DistrictAdministrativeId");

                    b.HasOne("CalculateFunding.Models.Reference", "EstablishmentStatus")
                        .WithMany()
                        .HasForeignKey("EstablishmentStatusId");

                    b.HasOne("CalculateFunding.Models.Reference", "EstablishmentTypeGroup")
                        .WithMany()
                        .HasForeignKey("EstablishmentTypeGroupId");

                    b.HasOne("CalculateFunding.Models.Reference", "EstablishmentType")
                        .WithMany()
                        .HasForeignKey("EstablishmentTypeId");

                    b.HasOne("CalculateFunding.Models.Reference", "Federations")
                        .WithMany()
                        .HasForeignKey("FederationsId");

                    b.HasOne("CalculateFunding.Models.Reference", "GOR")
                        .WithMany()
                        .HasForeignKey("GORId");

                    b.HasOne("CalculateFunding.Models.Reference", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");

                    b.HasOne("CalculateFunding.Models.Reference", "NurseryProvision")
                        .WithMany()
                        .HasForeignKey("NurseryProvisionId");

                    b.HasOne("CalculateFunding.Models.Reference", "OfficialSixthForm")
                        .WithMany()
                        .HasForeignKey("OfficialSixthFormId");

                    b.HasOne("CalculateFunding.Models.Reference", "OfstedSpecialMeasures")
                        .WithMany()
                        .HasForeignKey("OfstedSpecialMeasuresId");

                    b.HasOne("CalculateFunding.Models.Reference", "ParliamentaryConstituency")
                        .WithMany()
                        .HasForeignKey("ParliamentaryConstituencyId");

                    b.HasOne("CalculateFunding.Models.Reference", "PhaseOfEducation")
                        .WithMany()
                        .HasForeignKey("PhaseOfEducationId");

                    b.HasOne("CalculateFunding.Models.Reference", "ReasonEstablishmentClosed")
                        .WithMany()
                        .HasForeignKey("ReasonEstablishmentClosedId");

                    b.HasOne("CalculateFunding.Models.Reference", "ReasonEstablishmentOpened")
                        .WithMany()
                        .HasForeignKey("ReasonEstablishmentOpenedId");

                    b.HasOne("CalculateFunding.Models.Reference", "ReligiousCharacter")
                        .WithMany()
                        .HasForeignKey("ReligiousCharacterId");

                    b.HasOne("CalculateFunding.Models.Reference", "ReligiousEthos")
                        .WithMany()
                        .HasForeignKey("ReligiousEthosId");

                    b.HasOne("CalculateFunding.Models.Reference", "SpecialClasses")
                        .WithMany()
                        .HasForeignKey("SpecialClassesId");

                    b.HasOne("CalculateFunding.Models.Reference", "TrustSchoolFlag")
                        .WithMany()
                        .HasForeignKey("TrustSchoolFlagId");

                    b.HasOne("CalculateFunding.Models.Reference", "Trusts")
                        .WithMany()
                        .HasForeignKey("TrustsId");

                    b.HasOne("CalculateFunding.Models.Reference", "UrbanRural")
                        .WithMany()
                        .HasForeignKey("UrbanRuralId");
                });
#pragma warning restore 612, 618
        }
    }
}
